import pandas
from openalea.lpy import Lsystem
from alinea.astk.sun_and_sky import sun_sky_sources, sky_sources
from alinea.caribu.CaribuScene import CaribuScene
from alinea.caribu.light import light_sources

# default location and dates (Montpellier)
_daydate = '2000-06-21'
_timezone = 'Europe/Paris'
_longitude = 3.52
_latitude = 43.36
_altitude = 56

# default parameters for lsystem
_lsys_params = {'SEED': 17, 'INSERTION_ANGLE' : 45 , 'PHYLLOTAXY': 144, 'BRANCH_ELASTICITY': 0.06,
                      'INTERNODE_FLENGTH':3.5, 'LONGGU_PEAK_POSITION': 0.5, 'TIMESTEP':2, 'LIGHTON': False,
                      'ORCHARD': False}


def illuminate(lscene, isolated=True, density=9, clear_sky=False, daydate=_daydate, longitude=_longitude, latitude=_latitude,
               altitude=_altitude, timezone=_timezone):
    """ Illuminate a plant
    Args:
        isolated : is the plant isolated or within a canopy ?
        clear_sky: use clear_sky (homogeneous sky is used otherwise)
        irradiance: (float) sum of horizontal irradiance of all sources. If None
         diffuse horizontal clear_sky irradiance are used for clear_sky type and
          20% attenuated clear_sky global horizontal irradiances are used for
          soc and uoc types.
        dates: A pandas datetime index (as generated by pandas.date_range). If
            None, hourly values for daydate are used.
        daydate: (str) yyyy-mm-dd (not used if dates is not None).
        longitude: (float) in degrees
        latitude: (float) in degrees
        altitude: (float) in meter
        timezone:(str) the time zone (not used if dates are already localised)

    Returns:
        elevation (degrees), azimuth (degrees, from North positive clockwise),
        and horizontal irradiance of sources
    """
    if not clear_sky:
        light = light_sources(*sky_sources())
    else:
        sun, sky = sun_sky_sources(daydate=daydate, longitude=longitude, latitude=latitude, altitude=altitude,
                                   timezone=timezone, normalisation=1)
        light = light_sources(*sun) + light_sources(*sky)
    inter_row = 80
    inter_plant = 1. / density / (inter_row / 100.) * 100
    pattern = (-0.5 * inter_row, -0.5 * inter_plant,
               0.5 * inter_row, 0.5 * inter_plant)
    cs = CaribuScene(lscene, light=light, pattern=pattern, scene_unit='cm')
    raw, agg = cs.run(direct=True, simplify=True, infinite=not isolated)
    return cs, raw, agg


#scalars = [('SEED', 'Integer', 17, 0, 100), ('INSERTION_ANGLE', 'Integer', 45, 0, 90),
# ('PHYLLOTAXY', 'Integer', 144, 0, 359), ('BRANCH_ELASTICITY', 'Float', 0.06, 0.0, 0.1, 2),
# ('INTERNODE_FLENGTH', 'Float', 3.5, 0.0, 5.0, 1), ('LONGGU_PEAK_POSITION', 'Float', 0.5, 0.0, 0.9, 1),
# ('TIMESTEP', 'Integer', 1, 1, 100), ('LIGHTON', 'Bool', False), ('ORCHARD', 'Bool', False)]

def process(**kwds):
    params={k:v for k,v in _lsys_params.iteritems()}
    params.update(kwds)
    l = Lsystem('sensitivityanalysis.lpy', params)
    lstring = l.iterate()
    lscene = l.sceneInterpretation(lstring)
    return lstring, lscene

def plant_irradiance(lstring, lscene, isolated=True, illuminated=None):
    if illuminated is None:
        _, _, agg = illuminate(lscene, isolated=isolated)
    else:
        _, _, agg = illuminated
    labels = {i: mod.name for i,mod in enumerate(lstring) if i in agg['Ei']}
    agg.update({'label': labels})
    df = pandas.DataFrame(agg)
    res={}
    for lab in set(df.label):
        dfl = df.loc[df.label==lab,:]
        area = dfl.area.sum()
        ei = sum(df.Ei * df.area) / area
        res[lab + '_area'] = area
        res[lab + '_Ei'] = ei
    return res